FORMAT: 1A

# CF Web Service API - Overview

**Introduction**

This REST API provides access to some of the functionality of the Century Financials.

The API uses resource-oriented URLs that leverage built in features of HTTP, like authentication, caching, verbs and response codes. 
All request and response bodies are JSON encoded, including error responses. 
Any HTTP 1.0 client should be able to communicate with the API.

The API is a user interface for a developer, so in most cases, 
the API can be easily explored from the browser. 
For the best browser API discovery experience, we recommend 
using Chrome and the Postman REST Client extension.

**Authentication**

Access to the API is authenticated using HTTP Basic Auth over HTTPS. Any requests over plain HTTP will fail.

    $ curl -u userid:password https://site.censof.com/api/ar/v1/customers

OAuth2 authentication support is planned in the next release.

All requests are associated with a specific user defined in Century Financials, and permissions are limited to that user’s roles.

**Changes**

This is a versioned API, and this document describes version 1.0. Any breaking changes to the API will released in another version.

**Requests**

The base URL of the API is https://site/api/module/v1 where site should be replaced with your Century Financials base url and module with 2 character CF module code. 

The API uses standard HTTP verbs to indicate the intent of a request:

* GET - to retrieve a resource or collection of resources
* POST - to create a resource
* PUT - to set/modify a resource
* DELETE - to delete a resource

**JSON Bodies**

All POST & PUT requests are JSON encoded and must have have content type of application/json, or the API will return a 415 Unsupported Media Type status code.

    $ curl -u userid:password https://site/api/ar/v1/customer/CS/ACME \
        -X PUT \
        -H 'Content-Type: application/json' \
        -d '{"arcu_lname":"ACME Widgets Ltd"}'
        
**Limited HTTP Clients**

If you are using an HTTP client to access the API that doesn’t support PUT or DELETE requests, send a POST request with an X-HTTP-Method-Override header specifying the desired verb.

    $ curl -u userid:password https://site/api/ar/v1/customer/CS/ACME \
        -X POST \
        -H 'X-HTTP-Method-Override: DELETE'
        
**Responses**

All response bodies are JSON encoded.

A single resource is represented as a JSON object:

    {
        “field1”: “value”,
        “field2”: “false”,
        “field3”: []
    }

A collection of resources are represented as a JSON array of objects:

    [
        {
            “field1”: “value”,
            “field2”: “false”,
            “field3”: []
        },
        {
            “field1”: “value”,
            “field2”: “false”,
            “field3”: []
        }
    ]
    
Timestamps & dates are in UTC and formatted as ISO8601.

Dates use extended format e.g. YYYY-MM-DD

Unset fields will be represented as a null or empty string instead of not being present. If the field is an array, it will be represented as an empty array - ie [].

HTTP Status Codes

HTTP status codes are used to indicate success or failure of a request.

Success codes:

* 200 OK - Request succeeded. Response included
* 201 Created - Resource created. URL to new resource in Location header
* 204 No Content - Request succeeded, but no response body

Error codes:

* 400 Bad Request - Could not parse request
* 401 Unauthorized - No authentication credentials provided or authentication failed
* 403 Forbidden - Authenticated user does not have access
* 404 Not Found - Resource not found
* 405 Method Not Allowed - Requested method for the endpoint isn’t supported
* 415 Unsupported Media Type - POST/PUT/PATCH request occurred without a application/json content type
* 422 Unprocessable Entry - A request to modify or create a resource failed due to a validation error.
* 429 Too Many Requests - Request rejected due to rate limiting if implemented.
* 500, 501, 502, 503, etc - An internal server error occurred

All 400 series errors (400, 401, 403, etc) will be returned with a JSON object in the body and an application/json content type.

    {
        “status_code”: 400
        “message”: “Not Found”
    }

500 series error codes (500, 501, 502, etc) do not return JSON bodies unless the server is running in debug mode.

**Field Filtering**

All responses from the API can limit fields to only those fields required by the client. Pass a fields query parameter with a comma separated list of the required fields.

For example

    GET /api/ar/v1/openitems/CS/ACME?fields=aroi_itemno,aroi_currcode,aroi_openamount

would return the following response body:


    [
        {
            "aroi_itemno": 24684,
            "aroi_curcode": "AUD”,
            "aroi_openamount": 40.35
        },
        {
            "aroi_itemno": 24686,
            "aroi_curcode": "AUD”,
            "aroi_openamount": 400.75
        }
    ]
   
**Embedding**
  
Many endpoints support embedding related resources to minimise the number of API roundtrips.

Embedding is activated by passing an embed query parameter followed by a comma separated list of the embed types.

For example:

    GET /api/ar/v1/openitems/CS/ACME?embed=allocateditems
    
would return the following response body:

    [
        {
            "aroi_itemno": 24684,
            "aroi_curcode": "AUD”,
            "aroi_openamount": 40.35,
            “allocateditems”: [
            "arai_othitmno": 27689,
            "arai_amount": 100.0
            ]
        },
        {
            "aroi_itemno": 24686,
            "aroi_curcode": "AUD”,
            "aroi_openamount": 400.75,
            “allocateditems”: []
        }
    ]
    
Only certain resource types can be embedded from certain endpoints. The endpoint documentation specifies which ones can be embedded.

**Counting**

All endpoints that return a collection can provide a count of the total number of results. To request a count, include a count=true query parameter. The count will be returned in a response header Total-Count.

For example:

    GET /api/ar/v1/openitems/CS/ACME?count=true

would return the following:

    200 OK
    Total-Count: 21
    Content-Type: application/json

    [
    ....
    ]

**Pagination**

Collection requests can return between 0 to 100 results per request, controlled by using the per_page and page query parameters. Endpoints are limited to 20 results by default.

    GET /api/ar/v1/openitems/CS/ACME?per_page=10&page=3

Not all endpoints support pagination.

**Sorting**

Some collection endpoints provide result sorting, activated by using the sort query parameter. The value of the sort is a comma separated list of fields to sort by. A descending sort can be specified by prepending a - to a field in the sort list. For performance reasons not all fields can be sorted on. The API endpoint specific documentation will list supported sort options.

The default sort for the endpoints is the resource primary key.

    GET /api/ar/v1/openitems/CS/ACME?sort=-aroi_docdate


